#I'm using 'podman-compose with sable version 1.0.3'


version: "1.0.3" #Reference guide https://github.com/compose-spec/compose-spec/blob/main/spec.md


services:
  localstack: #Emulator of AWS on local
    image: localstack/localstack
    container_name: localstack
    ports:
      - "4566:4566"
      - "4567-4597:4567-4597"
    networks:
      - back-net
    environment:
      - SERVICES=s3,ec2,sns,cloudwatch,secretsmanager,sts,iam
      - DEBUG=${DEBUG-1 }
      - DATA_DIR=/tmp/localstack/data
      #- DOCKER_HOST=unix:///var/run/docker.sock #In my case i use podman. If you use docker uncomment this line
      
      
      # Important: 
        #For security only need to enable and expose the 'podman API socket' taking advantage of the native 
        # features of 'rootless' in 'Podman'. It is required to run:
          # systemctl --user start podman.socket # So, you can execute 'podman-compose start'
      - DOCKER_HOST=unix://${XDG_RUNTIME_DIR}/podman/podman.sock  # If you use docker comment this line
      
      
      - HOST_TMP_FOLDER=/tmp/localstack
      - DEFAULT_REGION=eu-west-1
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/var/lib/localstack"
      #- "/var/run/docker.sock:/var/run/docker.sock" #In my case i use podman. If you use docker uncomment this line
      - "${XDG_RUNTIME_DIR}/podman/podman.sock:/var/run/docker.sock" #Required in podman case: 'systemctl --user start podman.socket'
  
  admtools: #Tools for connect and management AWS infraestructure
    image: imgtools:1.0
    build: ./containers/admtools
    container_name: admtools
    depends_on:
      - localstack
    entrypoint: ["bash", "-x", "/root/containers/admtools/entrypoint.sh"]
    networks:
      - back-net
    environment:
      # Fake credentials, it's a requirement of Terragrunt/Terraform to be able work
      - AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
      - AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY
      - AWS_DEFAULT_REGION=eu-west-1
    volumes:
      - "${PWD}:/root/"

  
  #https://docs.greptime.com/getting-started/installation/greptimedb-standalone#docker
  #https://docs.greptime.com/greptimecloud/tutorials/monitor-host-metrics/prometheus/

  greptime-lab:
    image: greptime/greptimedb:v0.11.3
    build: ./containers/greptime-lab
    container_name: greptime-lab
    depends_on:
      - localstack
      - admtools
    ports:
      - "4000-4003:4000-4003"
    entrypoint: ["bash", "-x", "/tmp/greptimedb/entrypoint.sh"]
    networks:
      - back-net
    environment:
    volumes:
      - "${PWD}/containers/greptime-lab:/tmp/greptimedb"


  
  promcol-lab:
    image: prom/cloudwatch-exporter:v0.16.0
    container_name: promcol-lab
    depends_on:
      - localstack
      - admtools
    ports:
      - "9106:9106"
    networks:
      - back-net
    environment:
      # Fake credentials, it's a requirement to be able work
      - AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
      - AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY
      - AWS_DEFAULT_REGION=eu-west-1
      - AWS_ENDPOINT_URL=http://localstack:4566
    volumes:
      - "${PWD}/containers/promcol-lab/config.yml:/config/config.yml"

  promwrt-lab:
    image: prom/prometheus:v3.1.0
    container_name: promwrt-lab
    depends_on: 
      - greptime-lab
    ports:
      - "9090:9090"
    networks:
      - back-net
    environment:
    volumes:
      - "${PWD}/containers/promwrt-lab/prometheus.yml:/etc/prometheus/prometheus.yml"

networks:
  back-net:
    name: back-net
  

  

  ###############
  # DISABLED  ##
  #############


  #otelcol-lab: #opentelemetry tool for the instrumentation of services
  # Has been disabled because the receiver is currently under development and is not included in the contrib 
  #     release.
  #  image: otel/opentelemetry-collector-contrib:0.117.0
  #  # About receiver:
  #    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awscloudwatchmetricsreceiver
  #    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/v0.117.0/receiver/awscloudwatchmetricsreceiver
  #    ################
  # 
  #  container_name: otelcol-lab
  #  networks:
  #    - back-net
  #  environment:
  #    # Fake credentials, it's a requirement to be able work
  #    - AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
  #    - AWS_SECRET_ACCESS_KEY=test
  #    - AWS_DEFAULT_REGION=eu-west-1
  #    - AWS_ENDPOINT_URL="http://localstack:4566"
  #  volumes:
  #    - "${PWD}/containers/otelcol-lab/config.yaml:/etc/otelcol-contrib/config.yaml"

  #influx3-lab: ## Has been disabled because it's in alpha state and doesn't yet have API endpoint for Promeheus 
  #     Alpha (01/2025)
  #Observability tools for management metrics, traces, logs & events in long term
  #  image: influxdb3:latest
  #  build: ./containers/influxdb3
  #  container_name: influx3-lab
  #  ports:
  #    "8181:8181"
  #  networks:
  #    - back-net
  #  environment:
  #  volumes:
  #    - "${PWD}/containers/influxdb3/db:/root/influxdb3/db"


  #loki: ## Has been disabled because it will be replaced by "Influxdb3" for log management
  ##https://grafana.com/docs/loki/latest/get-started/?pg=oss-loki&plcmt=resources
  #  image: grafana/loki:3.3.2
  #  container_name: loki
  #  ports:
  #    12345:12345
  #  networks:
  #    - back-net
  #  environment:
  #    # https://grafana.com/docs/alloy/latest/reference/cli/environment-variables/
  #    - 
  #  volumes:
  #    - "./containers/alloy/config.alloy:/etc/alloy/config.alloy"